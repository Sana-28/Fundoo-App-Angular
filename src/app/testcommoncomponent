
       <mat-card class="note-card2" fxFlex="100%" [style.background]="note.color"  class="openhide">
            <div style="margin-left: 90%;" class="images">
              <img [src]="fetchIcon(note)" (click)="isStatus(note)">
            </div>
               <div (click)="openDialog(note)">
                  <div  *ngIf="note.image">
                  <img class="image-class" [src]='"/assets/icons/"+note.image'/>
                  </div>
                  <div [innerHTML]="note.title" class="editable"></div>
                  <div style="word-wrap: break-word" [innerHTML]="note.description | linkify"></div>
                 
               </div>

                 <div *ngIf="note.ownerId!=null"> 
                   <div *ngIf="note.collaborators!=null">
                     <div *ngFor="let collaborator of note.collaborators">
                       <div fxLayout="row" fxLayoutGap="5px">
                         <div>
                           <mat-chip-list>
                                  <div>
                                    <img  style="height:20px;" src="/assets/icons/userProfile2.svg">
                                  </div>
                                   <mat-chip>{{collaborator.name}}</mat-chip>
                                    <mat-chip>{{collaborator.email}}</mat-chip>
                              </mat-chip-list>
                         </div>
                       </div>
                     </div>
                   </div>
                  </div>
                
       
                 <div *ngIf="note.collaboratorName!=null">
                   <div fxLayout="row" fxLayoutGap="5px">
                     <div>
                       <mat-chip-list>
                         <mat-chip>
                           <b>Shared from:</b>{{note.collaboratorName}}</mat-chip>
                       </mat-chip-list>
                     </div>
                   </div>
                  </div>
                
              <div>
              <div *ngIf="note.labels!=null">
                <div *ngFor="let label of note.labels">
                  <mat-chip-list>
                    <div fxLayout="row" fxLayoutGap="5px">
                      <div>
                        <mat-chip>{{label.labelTitle}}
                          <img src="{{clearImg}}"  (click)="doSomething(false, label.labelId, note.noteId)">
                        </mat-chip>
                      </div>
                    </div>
                  </mat-chip-list>
                </div>
              </div>
             </div>


            <div *ngIf="note.reminder!=null">
              <div mat-menu-item fxLayout="row" style="background-color: gainsboro;">
                <div style="font-size: 12px;">
                  <img style="margin-left: 8px;margin-top: 11px;" src="{{clockImg}">
                  <label>{{note.reminder|date:'MMM dd,y, hh:mm a'}}</label>
                </div>
                <div>
                  <img style="margin-left: 8px;margin-top: 11px;" src="{{clearImg}}" (click)="reminderSave(note,'null')">
                </div>
              </div>
            </div>



            <div fxLayout="row" class="hideme">

              <div>
                <button mat-icon-button [matMenuTriggerFor]="menu" class="images">
                  <mat-icon>more_vert</mat-icon>
                </button>

                <mat-menu #menu="matMenu">
                  <button type="submit" mat-menu-item (click)="moveTrash(note)">
                    <span>delete note</span>
                    </button>
                 
                     <div>
                      <button type="submit" mat-menu-item [matMenuTriggerFor]="label" (click)="getAllLabels()" > 
                      <span> Add label</span>
                      </button>
                      </div> 
                        <mat-menu #label="matMenu">
                        <div fxLayout="column" fxLayoutGap="20px">
                      <div>
                        <b>label note</b>
                      </div>
                      <div>
                        <mat-form-field>
                        <input matInput placeholder="Enter label name">
                        </mat-form-field>
                      </div>

                       <div *ngIf="labels!=null">
                        <div *ngFor="let label of labels">
                          <label>
                            <input type="checkbox" 
                             name="labels" 
                             value="{{label.labelTitle}}"
                             [(ngModel)]="label.checked" 
                             (ngModelChange)="doSomething($event, label.labelId, note.noteId)"/>
                              {{label.labelTitle}}
                          </label>
                        </div>
                      </div>

                    </div>
                  </mat-menu>
                </mat-menu>
              </div>
              <div>
                <img style="margin-right: 10px;height: 20px;margin-top: 10px;" matTooltip="collaborator" class="images" src="{{collaborator}}"  (click)="openCollaboratorDialog(note)">
              </div>

              <div>
                <button mat-icon-button [matMenuTriggerFor]="color" class="images">
                  <mat-icon>color_lens</mat-icon>
                </button>
                <mat-menu #color="matMenu">

                  <div>
                    <a *ngFor="let color of colors">

                      <img src="{{color.path}}" (click)="note.color=color.color;updateNoteColor(note,note.status)">
                    </a>
                  </div>
                </mat-menu>
              </div>

              <div>
                <img style="margin-right: 10px;height: 20px;margin-top: 10px;" class="images" [src]="archiveImg" (click)="archive(note)">
              </div>
           
               <div>
                <button mat-icon-button [matMenuTriggerFor]="reminder" class="images">
                  <img src="{{reminderImg}}">
                </button>

                 <mat-menu #reminder="matMenu">
                  <div>
                    <button type="submit" mat-menu-item>
                      <b>Reminder:</b>
                    </button>
                  </div>

                  <div>
                    <button type="submit" mat-menu-item (click)="reminderSave(note,'Today')">
                      <span>Later today</span>
                      <span>8:00PM</span>
                    </button>
                  </div>

                  <div>
                    <button type="submit" mat-menu-item (click)="reminderSave(note,'Tomorrow')">
                      <span>Tomorrow</span>
                      <span>8:00AM</span>
                    </button>
                  </div>

                  <div>
                    <button type="submit" mat-menu-item (click)="reminderSave(note,'Next week')">
                      <span>Next week</span>
                      <span>Mon, 8:00Am</span>
                    </button>
                  </div>

                  <div>
                    <button type="submit" mat-menu-item [matMenuTriggerFor]="calender">
                      <span>Pick date & time</span>
                    </button>
                  </div>

                  <mat-menu #calender="matMenu">

                    Date Time:

                    <input [owlDateTime]="dt1" [owlDateTimeTrigger]="dt1" placeholder="Date Time" name="reminder" [(ngModel)]="model.reminder"
                      reqiured>
                    <owl-date-time #dt1></owl-date-time>

                    <div>
                      <button mat-button mat-raised-button color="primary" type="submit" (click)="reminderSave(note,'date picker')" style="font-size: 10px;">save</button>
                    </div>

                  </mat-menu>
                  
                </mat-menu>
              </div>
              
              <div class="images" style="margin-right: 10px;height: 20px;margin-top: 10px;">
                <mat-icon>photo</mat-icon>
                  <input type="file" accept="image/*" (change)="uploadImageToNote($event,note)"/>
               </div>

            </div> 
            
            <div *ngFor="let linkObj of note.urlPromise |async" style="margin-left:-4vh;" >
              <div fxLayout="row" style="width:100px">
                <div fxFlex="column" fxFlexAlign="start" style="margin-left:0" >
                    <img [src]="linkObj.urlImage" align='left' hspace='8' vspace='8' width='56px' height='56px'>
                </div>
                <div fxFlex="column" style="width:150px">
                <div style="word-wrap: break-word"><b> {{linkObj.urlTitle|truncate:40}}</b></div>
                <div style="word-wrap: break-word">{{linkObj.urlDomain}}</div>
              </div>
            </div>
          </div>
       </mat-card> 

///Csss
.note-card {
  max-width: 600px;
  margin-left: 400px;
  margin-top: 50px
}
 .editable {
  word-wrap: break-word;
  white-space: pre-wrap;
  outline: none;
 line-height: 20px;
 font-weight: bold;  
 /* font-style:bold;  */
} 

[contenteditable=true]:empty:before {
   content: attr(data-text);;
  
}  
.note-card2 {
  /*max-width: 600px;*/
  /* margin-left: 500px; */
  /* margin: 20px; */
  word-wrap: break-word;
   
}
 .left-container
{
  height: 1932px;
} 
.hideme{
  visibility: hidden;
}
.openhide:hover .hideme{
  visibility:visible;
}
.demo-chip-list {
  width: 100%;
}
 .images{
  opacity: 0.5
}
.images:hover{
  opacity:1.5;
  cursor: pointer
}
.label-design{
  width: 200px;
  top: 28px;
  margin-left: 503px;
  }
  .mat-div{
    margin-top:20px;
  }

  .list-view{
    width: 69%;
    margin-top: 15px;
  }
  .grid-view{
    margin-top: 15px;
  }

.image-class{
margin-left: -24px;
margin-top: -24px;
width: 240px;
max-height:150px;
}
.example-header-image {
   
  background-image: url('/assets/icons/userProfile2.svg');
  /* user profile pic*/
  background-size: cover;
  margin-left: 8px;
  margin-top: 11px;
}

////////////////////Ts
import { Component, OnInit,Input } from '@angular/core';
import { HttputilService } from '../httputil.service';
import { Note } from '../Note';
import {MatDialogModule} from '@angular/material/dialog';
import {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material';
import{NoteService}from '../note/note.service';
import {UpdateNoteComponent} from '../update-note/update-note.component';
import { CollaboratorComponent } from '../collaborator/collaborator.component';
import { Label } from '../Label';
import { LinkifyPipe } from '../linkify.pipe';
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';//hamid added
//import { HomeComponent } from './home.component';
@Component({
  selector: 'app-commonnote',
  templateUrl: './commonnote.component.html',
  styleUrls: ['./commonnote.component.css']
})
export class CommonnoteComponent implements OnInit {

  @Input() note:Note;
  labels: Label[];//for pipe
  fullImagePath: string;
  // public show:boolean = false;
  model: any = {};
  image: string;
  notes: Note[];
  statusNumber:number;//to decide pin or unpin..A
  
  archiveImg="/assets/icons/archive.svg";
  reminderImg = "/assets/icons/remender.svg";
  pinIcon = "/assets/icons/pin.svg";
  unPinIcon = "/assets/icons/pinblue.svg";
  colorBoard = "/assets/icons/colorpalette.svg";
  clockImg = "/assets/icons/clock.png";
  clearImg = "/assets/icons/clear.svg";
  collaborator = "/assets/icons/collaborator.svg";
  shareduser = "/assets/icons/shareduser.svg";
  colors = [{
    color: '#f26f75',
    path: '/assets/icons/Red.png'
  }, {
    color: '#fcff77',
    path: '/assets/icons/lightyellow.png'
  }, {
    color: '#80ff80',
    path: '/assets/icons/green.png'
  }, {
    color: '#9ee0ff',
    path: '/assets/icons/blue.png'
  }, {
    color: '#9966ff',
    path: '/assets/icons/purple.png'
  }, {
    color: '#ff99cc',
    path: '/assets/icons/pink.png'
  }, {
    color: '#a52a2a',
    path: '/assets/icons/brown.png'
  }
  ];

  constructor(private noteService:NoteService,private dialog: MatDialog) { }

  ngOnInit() {
    // this.refreshNote();
    // this.noteService.getAllNotes().subscribe(data => {
    //   this.notes = data.body;
      
    // });
  //  this.getAllLabels();
    
   // this.changeGridCss();
  }
  fetchIcon(note){
    if(note.status){
      return this.unPinIcon;
    }
   
    return this.pinIcon;
  }



  openDialog(note) {
    console.log("data", note);
    this.dialog.open(UpdateNoteComponent,
      {
        data: note,
        width: '600px'
      });
  }

  //collaboartor dialog box..(note,ownerId)
  openCollaboratorDialog(note, ownerId) {
    // console.log("data",note);
    this.dialog.open(CollaboratorComponent,
      {
        data: { note, ownerId },
        height: '250px',
        width: '600px'
      });
  }

  isStatus(note){
    if(this.note.status==0){ //0 means un-pin 
      this.pinNote(note);
    }else{
      this.unPinNote(note);
    }
  }
  createNote(): void {
    console.log("formValue", this.model);
    //this.commonService.postServiceData('note/createNote',this.model)
    this.noteService.createNoteService(this.model)
      .subscribe(data => {
        console.log("note created", data);
        this.refreshNote();
      });

  }
  
  refreshNote(): void {
    this.noteService.reloadAllNotes();
  }
//   callall(){
//     this.pinNote;
//     this.unPinNote;
// }
moveTrash(note): void {
  note.status = 1;
  this.noteService.updateNote('note/updateNote', note).subscribe(data => {
    console.log(data);
    this.refreshNote();
  });
}
archive(note): void {
  note.status = 2;
  this.noteService.updateNote('note/updateNote', note).subscribe(data => {
    console.log(data);
    this.refreshNote();
  });
}
pinNote(note): void {
  console.log("pin note", note);
  note.status = 3;
  this.noteService.updateNote('note/updateNote', note).subscribe(data => {
    console.log("pin note", data);
    this.refreshNote();
  });
};
unPinNote(note): void {
  console.log("pin note", note);
  note.status = 0;
  this.noteService.updateNote('note/updateNote', note).subscribe(data => {
    console.log("unPin note", data);
    this.refreshNote();
  });
};

updateNoteColor(note, status): void {
  console.log("change note color", note, status);
  note.status = status;
  this.noteService.updateNote('note/updateNote', note).subscribe(data => {
    console.log("color  response", data);
    this.refreshNote();
  });
};

reminderSave(note, day) {

  if (day === 'Today') {
    var today = new Date();
    today.setHours(20);
    today.setMinutes(0);
    today.setMilliseconds(0);
    note.reminder = today;
  }
  else if (day === 'Tomorrow') {
    var today = new Date();
    today.setDate(today.getDate() + 1);
    today.setHours(8);
    today.setMinutes(0);
    today.setMilliseconds(0);
    note.reminder = today;
  } else if (day === 'Next week') {

    var today = new Date();
    today.setDate(today.getDate() + 6);
    today.setHours(8);
    today.setMinutes(0);
    today.setMilliseconds(0);
    note.reminder = today;
  } else if (day === 'null') {
    note.reminder = null;
  } else {
    var dateObj = this.model.reminder;
    // let validDate =this.convertDate(dateObj); 
    var today = new Date(dateObj);

    // today.setDate(parseInt(newDt));
    // console.log("Date obj ",today);
    note.reminder = today;
    this.refreshNote();

  }
  this.noteService.updateNote('note/updateNote', note).subscribe(response => {
    console.log("reminder  response", response);
    this.refreshNote();
  });
}
//all curd opration label 
//how can i add labelId
getAllLabels(): void {
  this.noteService.getAllLabel().subscribe(response => {
    this.labels = response.body;
  });
}
uploadImageToNote(event, note) {

  var imageName = event.target.files[0].name;
  note.image = imageName;
  console.log(this.image);
  var pattern = /image-*/;

  this.uploadImage(note);


}

uploadImage(note): void {
  this.noteService.updateNote('note/uploadImage', note)
    .subscribe(response => {
      console.log("Image response :", response);
    });
}


addRemoveLabelToNote(noteId, labelId, operation): void {

  console.log("note updating with label");
  this.noteService.updateNote('note/addLabelToNote/' + noteId + '/' + labelId + '/' + operation,
    {
      params: {
        labelId: labelId,
        noteId: noteId,
        operation: operation

      }
    }).subscribe(data => {
      console.log("color  response", data);
    });
};

doSomething(event, labelId, noteId) {
  this.addRemoveLabelToNote(noteId, labelId, event);
  console.log(noteId, labelId, event);
}



getScrapData(description : string): Observable<any> {
      let url = this.urlify(description);
    if(!url){
      let subjectObj =  new Subject<any>();
      // setTimeout(subjectObj.next.bind(null,[]));
      return subjectObj.asObservable();
    } 
    return this.noteService.getUrlData(url)


}

 urlify(text) :Array<string> {
   if(!text){
     text = "";
   }
  var urlRegex = /(^|\s)((https?:\/\/)?[\w-]+(\.[\w-]+)+\.?(:\d+)?(\/\S*)?)/gi;
  return text.match(urlRegex);
  
}


}